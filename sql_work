    -- Creating databases.
CREATE DATABASE <name>;

    -- Deleting Database.
DROP DATABASE <name>;

    -- Using database.
USE <name_db>;

    -- Shows you what database you are in.
SELECT database();

    -- Creating tables
CREATE TABLE tablename 
    (
        column_name data_type,
        column_name data_type
    );

    -- Showing the tables
SHOW tables;

    -- Getting the content 
SHOW COLUMNS FROM <tablename>;

DESC <tablename>;

    -- Deleting Tables
DROP TABLE <tablename>;

    -- Inserting data into table
INSERT INTO cats(name,age)
VALUES ('Jetson', 7);

INSERT INTO cats
        (NAME, 
        age)
VALUES  ('Jetson',
        7);
        
    -- Showing warnings
SHOW WARNINGS;

    -- Specifiying NOT NULL 
CREATE TABLE cats2
    (
        name VARCHAR(100) NOT NULL,
        age INT NOT NULL
    );

    -- Default Values for something is not specified 
CREATE TABLE cats3
    (
        name VARCHAR(100) DEFAULT 'unnamed',
        age INT DEFAULT 99
    );

CREATE TABLE cats3
    (
        name VARCHAR(100) NOT NULL DEFAULT 'unnamed',
        age INT NOT NULL DEFAULT 99
    );
-- DIfference is that in the first one there is nothing stopping us to put NULL so
-- we can still put NULL but on the second one we can not put NULL manually. 

    -- Primary Keys : Unique identifier on row !!! 
CREATE TABLE unique_cats
    (
        cat_id INT NOT NULL,
        name VARCHAR(100) NOT NULL DEFAULT 'unnamed',
        age INT NOT NULL DEFAULT 99,
        PRIMARY KEY(cat_id)
    );


    -- Auto Increment: No longer have to specify id. 
CREATE TABLE unique_cats
    (
        cat_id INT NOT NULL AUTO_INCREMENT,
        name VARCHAR(100) NOT NULL DEFAULT 'unnamed',
        age INT NOT NULL DEFAULT 99,
        PRIMARY KEY(cat_id)
    );    


        -- Reading
SELECT name, age FROM cats;


        --Update: Altering the existing data.** Good rule of thump try selecting before updating.
UPDATE cats SET breed = 'Shorthair' 
WHERE breed = 'Tabby'; 

        -- Delete: 
DELETE FROM cats WHERE name ='Egg';


        -- Running SQL FILES

source <filename.sql>
-- If the file is not in the same path 
source filepath/<filename.sql>
                            --THE WORLD OF STRINGS
        --CONCAT 
SELECT 
    CONCAT(author_fname, ' ', author_lname) 
FROM books

-- CONCAT_WS : COncat with separator. 
SELECT CONCAT_WS(' - ', author_fname, author_lname) FROM books

        --SUBSTRING(SUBSTR): Printing portion of string
SELECT SUBSTRING('Hello World', 1, 4) --> HELL
SELECT SUBSTRING('Hello World', 7) --> World
SELECT SUBSTRING('Hello World', -3) --> rld

        -- Replace: Replaces parts of a string. Case sensitive. 

SELECT REPLACE('Hello World', 'Hell', '#$#@');
SELECT REPLACE(title, 'e', '3') FROM books


        -- REVERSE: Reverse a string.
SELECT REVERSE('Hello World') --> dlrow olleh

        -- CHAR_LENGTH: How many characters in a given string.
SELECT CHAR_LENGTH('Hello World'); --> 11

        -- Upper and Lower
SELECT UPPER('Hello World') --> HELLO WORLD
SELECT LOWER('Hello World')


SELECT UPPER(CONCAT(author_fname, ' ', author_lname)) AS 'full name in caps' FROM books;
SELECT CONCAT(title, ' was released in ', released_year) AS blurb FROM books;
SELECT title AS title, CHAR_LENGTH(title) AS 'character count' FROM books;
SELECT CONCAT(SUBSTR(title, 1, 10), '...') AS 'short title', 
CONCAT(author_lname, ', ',author_fname ) AS 'author',
CONCAT( stock_quantity,' in stock') FROM books;

                        -- REFINING OUR SELECTIONS 
        
        -- DISTINCT: Getting unique data.
SELECT DISTINCT author_fname, author_lname FROM books; --> We are getting the combination of distinct.

        -- ORDER BY (Ascending by default)
SELECT author_fname, author_lname FROM books ORDER BY author_fname;
SELECT author_fname, author_lname FROM books ORDER BY 2; --> Shortcut

        -- LIMIT
SELECT title, released_year FROM books ORDER BY released_year DESC LIMIT 0,5 -> 0 is the starting point and how many we want to go.

SELECT * FROM tbl LIMIT 95, 18446744478927440274

        -- LIKE: Allows us to perform better searching in data. 
WHERE author_fname LIKE '%da%' --> %wildcards 
WHERE stock_quantity LIKE '____' --> 4 underscores. I wanna find a stock quantity that is 4 characters long!!

Phone numbers --> LIKE '(___)___-____'
WHERE title LIKE ' %\%% ' --> We need escape characters to selecet something with wildcards. 

SELECT title FROM books WHERE title LIKE '%Stories%';
SELECT title, pages FROM books ORDER BY pages DESC LIMIT 1;
SELECT CONCAT_WS ('-',title, released_year ) FROM books ORDER BY released_year DESC LIMIT 3;
SELECT title, author_lname FROM books WHERE author_lname LIKE '% %';
SELECT title, released_year, stock_quantity FROM books ORDER BY stock_quantity LIMIT 3;
SELECT title, author_lname FROM books ORDER BY author_lname, title;
SELECT UPPER(CONCAT('MY FAVORITE AUTHOR IS ', author_fname, ' ', author_lname)) FROM books ORDER BY author_lname;

                        -- THE MAGIC OF AGGREGATE FUNCTIONS
        -- COUNT 
SELECT COUNT(*) FROM books; --> 19
SELECT COUNT(DISTINCT author_fname) FROM books; --> 12 unique 
SELECT COUNT(DISTINCT author_fname, author_lname) FROM books --> 
SELECT COUNT(*) FROM books WHERE title LIKE '%the%' --> 6

        -- GROUP BY : SUmmarizes or aggregares identical data into single rows
        
SELECT author_lname, COUNT(*) FROM books GROUP BY author_lname;

SELECT author_lname, COUNT(*) FROM books GROUP BY author_lname, author_fname;

        -- MIN and MAX
SELECT MIN(released_year) FROM books;
SELECT MAX(released_year) FROM books;

THere is an potential problem when you try SELECT MAX(released_year), title FROM books; each of them are seperate

One solution for this is to run subqueries 

SELECT * FROM books WHERE pages = (SELECT Min(pages) FROM books);
SELECT * FROM books ORDER BY pages LIMIT 1;

        -- AVERAGE 
SELECT author_fname, author_lname, AVG(pages) FROM books
GROUP BY author_lname, author_fname;

SELECT COUNT(*), released_year FROM books GROUP BY released_year;
SELECT SUM(stock_quantity) FROM books;
SELECT CONCAT(author_fname, ' ', author_lname), AVG(released_year) FROM books GROUP BY author_fname, author_lname;
SELECT CONCAT(author_fname, ' ', author_lname), MAX(pages) FROM books ORDER BY pages LIMIT 2;
SELECT released_year AS 'year', COUNT(*) AS '# books', AVG(pages) AS 'avg pages' FROM books GROUP BY released_year ORDER BY released_year;
SELECT CONCAT(author_fname, ' ', author_lname) FROM books
WHERE pages = (SELECT Max(pages) FROM books);

                                -- DATA TYPES
        -- CHAR 
CHAR has a fixed length. Allocate same amount of space for every row. If its lower than it will fill the remaining.
Longest char is 255 character long. Why does it matter? Char is faster for fixed length text. Like state abbreviation. Yes or no. SEX.

        -- DECIMAL
DECIMAL(5,2) --> 999.99

IF WE PUT 78987898 ---> IT will put 999.99 largest possible decimal. So we need to increase the decimal.

        -- FLOAT AND DOUBLE
FLOAT and DOUBLE data types are floating-point types and calculations are approximate. Store larger numbers using less space. 
BUT it comes at the cost of precision. 

Floats has precision issues after 7 digits. Memory needed 4 bytes.
Double has precision issues after 15 digits. Memory needed 8 bytes.

So WHich Do I Use. ALways try to use decimal unless precision does not matter. 

        -- DATE & TIMES
DATE: Values with a date but no time. 'YYYY-MM-DD'

TIME: Values with a time but no date. 

DATETIME: Values with time and date. Most used one!!! 'YYY-MM-DD HH:MM:SS'

CURDATE() : gives current date
CURTIME(): gives current time 
NOW(): gives current datetime

These are become useful when we use conjungtion with INSERT statement. 

        -- FORMATING DATES
    ============================
DAY()
DAYNAME()
DAYOFWEEK()
DAYOFYEAR()

-- DATE_TIME:
SELECT DATE_FORMAT('2009-10-04', '%W %M %Y at %h:%m')

-- DATE MATH
DATEDIFF
DATE_ADD

SELECT DATEDIFF(NOW(), birthdate) FROM people_2;
SELECT * FROM people;
 
SELECT DATEDIFF(NOW(), birthdate) FROM people_2;
 
SELECT name, birthdate, DATEDIFF(NOW(), birthdate) FROM people_2;
 
SELECT birthdt FROM people_2;
 
SELECT birthdt, DATE_ADD(birthdt, INTERVAL 1 MONTH) FROM people_2;
 
SELECT birthdt, DATE_ADD(birthdt, INTERVAL 10 SECOND) FROM people_2;
 
SELECT birthdt, DATE_ADD(birthdt, INTERVAL 3 QUARTER) FROM people_2;
 
SELECT birthdt, birthdt + INTERVAL 1 MONTH FROM people_2;
 
SELECT birthdt, birthdt - INTERVAL 5 MONTH FROM people_2;
 
SELECT birthdt, birthdt + INTERVAL 15 MONTH + INTERVAL 10 HOUR FROM people_2;



        -- TIMESTAMPS (Important!)
Storing information or metadata when something is updated or created. Also a datatype in SQL.

Timestamp and datetime is exact same only difference is timestamp goes back to 1970 to 2038. WHere 
DATETIME is goes to 1000 to 9999. TIMESTAMP takes up less space. 

CREATE TABLE comments (
    content VARCHAR(100), 
    created_at TIMESTAMP DEFAULT NOW()
    );

CREATE TABLE comments (
    content VARCHAR(100), 
    created_at TIMESTAMP DEFAULT NOW() ON UPDATE CURRENT_TIMESTAMP
    ); 
    

                                THE POWER OF LOGICAL OPERATORS
                                ==============================
NOT LIKE
========
SELECT title FROM books WHERE title LIKE 'W';
 
SELECT title FROM books WHERE title LIKE 'W%';
 
SELECT title FROM books WHERE title LIKE '%W%';
 
SELECT title FROM books WHERE title LIKE 'W%';
 
SELECT title FROM books WHERE title NOT LIKE 'W%';

Greater Than and Equal to
=========================
SELECT title, released_year FROM books ORDER BY released_year;
SELECT title, released_year FROM books 
WHERE released_year > 2000 ORDER BY released_year;
SELECT title, released_year FROM books 
WHERE released_year >= 2000 ORDER BY released_year;
SELECT title, stock_quantity FROM books;
SELECT title, stock_quantity FROM books WHERE stock_quantity >= 100;
SELECT 99 > 1;
SELECT 99 > 567;
 
100 > 5
-- true
 
-15 > 15
-- false
 
9 > -10
-- true
 
1 > 1
-- false
 
'a' > 'b'
-- false
 
'A' > 'a'
-- false
 
'A' >=  'a'
-- true
 
SELECT title, author_lname FROM books WHERE author_lname = 'Eggers';
SELECT title, author_lname FROM books WHERE author_lname = 'eggers';
SELECT title, author_lname FROM books WHERE author_lname = 'eGGers';


LOGICAL AND(&&) , OR (||)
========================

SELECT * 
FROM books
WHERE author_lname='Eggers' 
    AND released_year > 2010 
    AND title LIKE '%novel%';

BETWEEN and NOT BETWEEN 
======================
SELECT 
    name, 
    birthdt 
FROM people
WHERE 
    birthdt BETWEEN CAST('1980-01-01' AS DATETIME)
    AND CAST('2000-01-01' AS DATETIME);
    
SELECT title, released_year FROM books 
WHERE released_year BETWEEN 2004 AND 2015;

SELECT title, released_year FROM books 
WHERE released_year NOT BETWEEN 2004 AND 2015;

IN and NOT IN
=============

SELECT title, author_lname FROM books
WHERE author_lname IN ('Carver', 'Lahiri', 'Smith');

SELECT title, released_year FROM books
WHERE released_year IN (2017, 1985);

SELECT title, released_year FROM books
WHERE released_year NOT IN 
(2000,2002,2004,2006,2008,2010,2012,2014,2016);

SELECT title, released_year FROM books
WHERE released_year >= 2000
AND released_year NOT IN 
(2000,2002,2004,2006,2008,2010,2012,2014,2016);

SELECT title, released_year FROM books
WHERE released_year >= 2000 AND
released_year % 2 != 0;


CASE STATEMENTS (No commas)
================
SELECT title, released_year,
    CASE
        WHEN released_year >= 2000 THEN 'Modern Genre'
        ELSE '20th Century Lit'
    END AS 'Genre'
FROM books;
    

SELECT title, stock_quantity,
    CASE 
        WHEN stock_quantity BETWEEN 0 AND 50 THEN '*'
        WHEN stock_quantity BETWEEN 51 AND 100 THEN '**'
        ELSE '***'
    END AS STOCK
FROM books;

SELECT title, stock_quantity,
    CASE 
        WHEN stock_quantity <= 50 THEN '*'
        WHEN stock_quantity <= 100 THEN '**'
        ELSE '***'
    END AS STOCK
FROM books; 

Exercises:
SELECT title FROM books 
WHERE author_lname = 'eggers' || author_lname = 'Chabon';

SELECT title FROM books 
WHERE released_year > 2000;

SELECT * FROM books 
WHERE pages BETWEEN 100 AND 200;

SELECT author_lname FROM books 
WHERE author_lname LIKE 'C%' || author_lname LIKE 'S%';

SELECT title, author_lname,
    CASE
        WHEN title LIKE '%stories%' THEN 'Short Stories'
        WHEN title IN ('Just Kids', 'a Heartbreaking Work of Staggering Genius') THEN 'Memoir'
        ELSE 'Novel'
    END AS 'Type'
FROM books; 

SELECT author_fname, author_lname,
    CASE 
        WHEN COUNT(*) = 1 THEN '1 book'
        ELSE CONCAT(COUNT(*), ' books')
    END AS COUNT
FROM books 
GROUP BY author_lname, author_fname;


                           ||||| ONE TO MANY RELATIONSHIPS ||||||
                                ==========================


CREATE TABLE customers(
    id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(100),
    last_name VARCHAR(100),
    email VARCHAR(100)
);

CREATE TABLE orders(
    id INT AUTO_INCREMENT PRIMARY KEY,
    order_date DATE,
    amount DECIMAL(8,2),
    customer_id INT,
    FOREIGN KEY(customer_id) REFERENCES customers(id)
);

    -- Subqueriy 
SELECT * FROM orders WHERE customer_id = 
    ( 
        SELECT id FROM customers WHERE last_name = 'George'
    )
    
-- Implicit Inner Join

SELECT first_name, last_name, order_date, amount 
FROM customers, orders
    WHERE customers.id = orders.customer_id
    
    Explicit INNER JOIN
    ===================
Select all records from A and B where the jon condition is met. 

SELECT * FROM customers 
JOIN orders
    ON customers.id = orders.customer_id;

SELECT first_name, last_name, order_date, amount 
FROM customers
JOIN orders
    ON customers.id = orders.customer_id;   
    
        LEFT JOIN
        ========
Select everyting from A, along with any matching records in B. 

SELECT first_name, last_name,order_date, amount FROM customers
LEFT JOIN orders
    ON customers.id = orders.customer_id;
    
-- Using IFNULL statement     
SELECT 
    first_name, 
    last_name,
    IFNULL(SUM(amount), 0) AS total_spent
FROM customers
LEFT JOIN orders
    ON customers.id = orders.customer_id
GROUP BY customers.id
ORDER BY total_spent;

        RIGHT JOIN
        ==========
Select everyting from B, along with any matching records in A 

We can be able to spot if someone deleted from orders or any changes. 

    ON DELETE CASCADE
    =================
Deleting data when there is a foreign key relationship.

CREATE TABLE customers(
    id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(100),
    last_name VARCHAR(100),
    email VARCHAR(100)
);
 
CREATE TABLE orders(
    id INT AUTO_INCREMENT PRIMARY KEY,
    order_date DATE,
    amount DECIMAL(8,2),
    customer_id INT,
    FOREIGN KEY(customer_id) 
        REFERENCES customers(id)
        ON DELETE CASCADE
);



            Exercises
            =========

CREATE TABLE students (
    id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(100)
);

CREATE TABLE papers (
    title VARCHAR(100),
    grade INT,
    student_id INT,
    FOREIGN KEY(student_id) REFERENCES students(id)
);

INSERT INTO students (first_name) VALUES 
('Caleb'), ('Samantha'), ('Raj'), ('Carlos'), ('Lisa');

INSERT INTO papers (student_id, title, grade ) VALUES
(1, 'My First Book Report', 60),
(1, 'My Second Book Report', 75),
(2, 'Russian Lit Through The Ages', 94),
(2, 'De Montaigne and The Art of The Essay', 98),
(4, 'Borges and Magical Realism', 89);

SELECT first_name, title, grade FROM students
INNER JOIN papers
ON students.id = papers.student_id
ORDER BY grade DESC;

SELECT first_name, title, grade FROM students
LEFT JOIN papers
ON students.id = papers.student_id;

SELECT first_name, 
        IFNULL(title, 'MISSING'),
        IFNULL(grade, 0)
        FROM students
LEFT JOIN papers
ON students.id = papers.student_id;

SELECT first_name, 
        IFNULL(AVG(grade), 0) as 'average'
        FROM students
LEFT JOIN papers
ON students.id = papers.student_id
GROUP BY students.id
ORDER BY average DESC;

SELECT first_name, 
        IFNULL(AVG(grade), 0) as 'average',
        CASE 
            WHEN AVG(grade) >= 75 THEN 'PASSING'
            ELSE 'FAILING'
        END AS 'passing_status'
        FROM students
LEFT JOIN papers
ON students.id = papers.student_id
GROUP BY students.id
ORDER BY average DESC;

                        =====MANY TO MANY RELATIONSHIPS======
Students - Classes
Blog Post - Tags

CREATE TABLE reviews (
    id INT AUTO_INCREMENT PRIMARY KEY,
    rating DECIMAL(2,1),
    series_id INT,
    reviewer_id INT,
    FOREIGN KEY(series_id) REFERENCES series(id),
    FOREIGN KEY(reviewer_id) REFERENCES reviewers(id)
);

SELECT title, AVG(rating) as avg_rating
FROM series 
INNER JOIN reviews 
    ON series.id = reviews.series_id
    GROUP BY series.id
    ORDER BY avg_rating;
    
SELECT first_name, last_name,rating
FROM reviewers 
INNER JOIN reviews 
    ON reviewers.id = reviews.reviewer_id;

SELECT title as unreviewed  
FROM series
LEFT JOIN reviews
    ON series.id = reviews.series_id
WHERE rating IS NULL;

SELECT genre, ROUND(AVG(rating), 2)
FROM series 
INNER JOIN reviews
    ON series.id = reviews.series_id
GROUP BY genre;


SELECT 
    first_name, 
    last_name, 
    COUNT(rating) AS COUNT, 
    IFNULL(MIN(rating), 0) as MIN,
    IFNULL(MAX(rating), 0) AS MAX,
    IFNULL(AVG(rating), 0) AS AVG,
    CASE 
        WHEN rating IS NULL THEN 'INACTIVE'
        ELSE 'ACTIVE'
    END AS 'STATUS'
FROM reviewers
LEFT JOIN reviews
    ON reviewers.id = reviews.reviewer_id
GROUP BY reviewers.id;

SELECT first_name, 
       last_name, 
       Count(rating)                               AS COUNT, 
       Ifnull(Min(rating), 0)                      AS MIN, 
       Ifnull(Max(rating), 0)                      AS MAX, 
       Round(Ifnull(Avg(rating), 0), 2)            AS AVG, 
       IF(Count(rating) > 0, 'ACTIVE', 'INACTIVE') AS STATUS 
FROM   reviewers 
       LEFT JOIN reviews 
              ON reviewers.id = reviews.reviewer_id 
GROUP  BY reviewers.id; 


    === PUTTING ALL TABLES TOGETHER ===

SELECT 
    title,
    rating,
    CONCAT(first_name,' ', last_name) AS reviewer
FROM reviewers
INNER JOIN reviews 
    ON reviewers.id = reviews.reviewer_id
INNER JOIN series
    ON series.id = reviews.series_id
ORDER BY title;

=== INSTAGRAM DB ===

CREATE TABLE users (
    id INTEGER AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(255) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT NOW()
);

CREATE TABLE likes (
    user_id INTEGER NOT NULL,
    photo_id INTEGER NOT NULL,
    created_at TIMESTAMP DEFAULT NOW(),
    FOREIGN KEY(user_id) REFERENCES users(id),
    FOREIGN KEY(photo_id) REFERENCES photos(id),
    PRIMARY KEY(user_id, photo_id)
);


CREATE TABLE follows (
    follower_id INTEGER NOT NULL,
    followee_id INTEGER NOT NULL,
    created_at TIMESTAMP DEFAULT NOW(),
    FOREIGN KEY(follower_id) REFERENCES users(id),
    FOREIGN KEY(followee_id) REFERENCES users(id),
    PRIMARY KEY(follower_id, followee_id)
);

CREATE TABLE tags (
  id INTEGER AUTO_INCREMENT PRIMARY KEY,
  tag_name VARCHAR(255) UNIQUE,
  created_at TIMESTAMP DEFAULT NOW()
);
CREATE TABLE photo_tags (
    photo_id INTEGER NOT NULL,
    tag_id INTEGER NOT NULL,
    FOREIGN KEY(photo_id) REFERENCES photos(id),
    FOREIGN KEY(tag_id) REFERENCES tags(id),
    PRIMARY KEY(photo_id, tag_id)
);

                                    == EXERCISES ==
-- Find the 5 oldest users

SELECT username, created_at FROM users 
ORDER BY created_at LIMIT 5;

-- What day of the week do most users register on? 

SELECT DAYNAME(created_at), COUNT(DAYNAME(created_at)) FROM users
GROUP BY DAYNAME(created_at);

-- Find the users who have never posted a photo

SELECT username, image_url FROM users
LEFT JOIN photos
 ON users.id = photos.user_id
 WHERE image_url IS NULL;

-- Who can get the most likes on a single photo?

SELECT image_url, COUNT(*), username
FROM photos 
INNER JOIN likes
    ON photos.id = likes.photo_id
INNER JOIN users
    ON photos.user_id = users.id
GROUP BY image_url
ORDER BY COUNT(*) DESC LIMIT 1;

-- How many times does the average user post?

SELECT (SELECT COUNT(*) FROM photos) / (SELECT COUNT(*) FROM users);

-- What are the top 5 most commonly used hashtags?

SELECT tags.tag_name, 
       Count(*) AS total 
FROM   photo_tags 
       JOIN tags 
         ON photo_tags.tag_id = tags.id 
GROUP  BY tags.id 
ORDER  BY total DESC 
LIMIT  5; 

-- Find users who liked every single photo on the site

SELECT username, COUNT(*) total
FROM users
INNER JOIN likes
    ON users.id = likes.user_id
GROUP  BY likes.user_id
HAVING  total = (SELECT COUNT(*) FROM photos);


=== SQL == 

ROUNDING DOWN TO NEAREST INTEGER. >>> FLOOR()

 round it up to the next integer. >> CEIL()
 
 